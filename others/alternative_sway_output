#!/bin/bash

# Dependencies
# fzf
# jq/jaq

# man 5 sway-output

alias_path="$HOME/.config/ansoncg/sway_output/alias.json"
declare -A op_pipeline
declare -a params

get_alias_from_output() {
	jaq -rc ".[] | select(.output==\"$1\") | .alias" <"$alias_path"
}

get_output_from_alias() {
	jaq -rc ".[] | select(.alias==\"$1\") | .output" <"$alias_path"
}

list_alias() {
	jaq -rc '.[].alias' <"$alias_path"
}

list_outputs() {
	swaymsg -t get_outputs | jaq -r '.[].name'
}

list_operations() {
	printf "\
Scale
Toggle"
}

list_scale_factor() {
	printf "\
1
1.3
1.5
1.7
2"
}

list_outputs_with_alias() {
	while read -r output; do
		alias=$(get_alias_from_output "$output")
		printf "%-10s | %-10s\n" "$output" "$alias"
	done < <(list_outputs)
}

pick_output() {
	choice_output=$(fuzzy_picker "$(list_outputs_with_alias)" "Output" | cut -d '|' -f1)
	params[1]="$choice_output"
}

pick_operation() {
	choice_operation=$(fuzzy_picker "$(list_operations)" "Operations")
}

pick_scale_factor() {
	choice_scale_factor=$(fuzzy_picker "$(list_scale_factor)" "Scale factor")
	params[2]="$choice_scale_factor"
}

clean_output() {
	choice_output=$(get_output_from_alias "${params[1]}")
	if [ -z "$choice_output" ]; then
		choice_output="${params[1]}"
	fi
}

operation_scale() {
	clean_output
	swaymsg output "$choice_output" scale "${params[2]}"
}

operation_toggle() {
	clean_output
	swaymsg output "$choice_output" toggle
}

fuzzy_picker() {
	echo "$1" | fzf \
		--border=sharp \
		--cycle \
		--header="$2" \
		--header-first \
		--info=inline \
		--margin=0,0,0,0 \
		--padding=0,0,0,1 \
		--height=50%
}

run_pipeline() {
	pipe_end=${op_pipeline["$pipe_name" - 0]}
	for i in $(seq "$pipe_start" "$pipe_end"); do
		${op_pipeline["$pipe_name" - "$i"]}
	done
}

print_help() {
	printf "\
> Sway output control <
Options:
    -h, --help                       Show this help.
    -l, --list                       List connected outputs.
    -s, --scale <alias> <scale>      Scale an output.
    -t, --toggle <alias>             Toggle and output.

Info:
    Operations and options have a fuzzy selector if not specified.
"
}

# Scale
op_pipeline["scale-0"]=3
op_pipeline["scale-1"]=pick_output
op_pipeline["scale-2"]=pick_scale_factor
op_pipeline["scale-3"]=operation_scale

# Toggle
op_pipeline["toggle-0"]=2
op_pipeline["toggle-1"]=pick_output
op_pipeline["toggle-2"]=operation_toggle

# Help
op_pipeline["help-0"]=1
op_pipeline["help-1"]=print_help

# List
op_pipeline["list-0"]=1
op_pipeline["list-1"]=list_outputs_with_alias

parse_command() {
	case "$1" in
	-s | --scale | Scale)
		pipe_name=scale
		;;
	-t | --toggle | Toggle)
		pipe_name=toggle
		;;
	-l | --list)
		pipe_name=list
		;;
	-h | --help)
		pipe_name=help
		;;
	*)
		pick_operation
		parse_command "$choice_operation"
		;;
	esac
}

params=("$@")
pipe_start=$#
if [ $pipe_start == 0 ]; then
	pipe_start=1
fi
parse_command "$@"
run_pipeline
