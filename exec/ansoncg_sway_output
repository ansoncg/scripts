#!/bin/bash

# Dependencies
# - fzf
# - jaq
# - wayvnc
# - wl-mirror
# - slurp

## Configuration variables ---

alias_path="$HOME/.config/ansoncg/sway_output/alias.json"

## List information ---

get_alias_from_output() {
	jaq -rc ".[] | select(.output==\"$1\") | .alias" <"$alias_path"
}

get_output_from_alias() {
	# Returns the input if not found
	output=$(jaq -rc ".[] | select(.alias==\"$1\") | .output" <"$alias_path")
	if [ -n "$output" ]; then
		echo "$output"
	else
		echo "$1"
	fi
}

list_current_modes() {
	while read -r current_width; do
		read -r current_height
		read -r current_refresh
		read -r current_ratio
		current_refresh=${current_refresh:0:-3}.${current_refresh: -3}Hz
		printf "%sx%s@%s %s\n" "$current_width" "$current_height" "$current_refresh" "$current_ratio"

	done < <(swaymsg -t get_outputs | jaq -rc '(.[].current_mode | .width, .height, .refresh, .picture_aspect_ratio)')
}

list_alias() {
	jaq -rc '.[].alias' <"$alias_path"
}

list_outputs() {
	swaymsg -t get_outputs | jaq -r '.[].name'
}

list_operations() {
	printf "\
| Headless-Create   |  Create a headless output                                   |
| Headless-Remove   |  Remove a headless output                                   |
| List              |  List all outputs and their information                     |
| Mirror            |  Mirror an output or a region                               |
| Mode              |  Change an output mode (resolution, frequency)              |
| Rotate            |  Rotate and flip an output                                  |
| Scale             |  Scale the UI size for an output                            |
| Toggle            |  Toggle power of an output                                  |
| Virtual-Display   |  Use VNC to create a virtual display with a headless output |
"

}

list_scale_factor() {
	printf "\
1
1.3
1.5
1.7
2"
}

list_rotations() {
	printf "\
normal
90
180
270
flipped
flipped-90
flipped-180
flipped-270"
}

list_headless_operations() {
	printf "\
Create
Remove
VNC"
}

list_addr() {
	printf "\
Any
Other\n"
	ip --json addr | jaq -r '.[].addr_info[].local'
}

list_outputs_with_alias() {
	while read -r output; do
		alias=$(get_alias_from_output "$output")
		printf "%-12s | %-12s\n" "$output" "$alias"
	done < <(list_outputs)
}

list_outputs_info() {
	echo "|--------------|------------|-------|-----------------------|-------------|-------|"
	printf "| %-12s | %-10s | %-5s | %-21s | %-11s | %-5s |\n" "Name" "Alias" "Scale" "Mode" "Rotation" "Power"
	echo "|--------------|------------|-------|-----------------------|-------------|-------|"
	while read -r output_name; do
		read -r current_power
		alias=$(get_alias_from_output "$output_name")

		if [ "$current_power" == true ]; then
			read -r current_scale
			read -r current_rotation
			read -r current_width
			read -r current_height
			read -r current_refresh
			current_power="On"
			current_refresh=${current_refresh:0:-3}.${current_refresh: -3}Hz
		else
			current_scale=0
			current_rotation=none
			current_width=0
			current_height=0
			current_refresh=0
			current_power="Off"
		fi

		printf "| %-12s | %-10s | %-5s | %4sx%-4s @ %-9s | %-11s | %-5s |\n" \
			"$output_name" \
			"$alias" \
			"$current_scale" \
			"$current_width" \
			"$current_height" \
			"$current_refresh" \
			"$current_rotation" \
			"$current_power"

	done < <(swaymsg -t get_outputs |
		jaq -rc \
			'(.[] |
            (.name),
            (.power),
            (select(.power==true) |
                (.scale),
                (.transform),
                (.current_mode | .width, .height, .refresh)))')
	echo "|--------------|------------|-------|-----------------------|-------------|-------|"
}

list_modes() {
	while read -r current_width; do
		read -r current_height
		read -r current_refresh
		read -r current_ratio
		current_refresh=${current_refresh:0:-3}.${current_refresh: -3}Hz
		printf ">>%sx%s@%s<< %s\n" "$current_width" "$current_height" "$current_refresh" "$current_ratio"

		read -r modes_len
		for _ in $(seq 1 "$modes_len"); do
			read -r mode_width
			read -r mode_height
			read -r mode_refresh
			read -r mode_ratio
			mode_refresh=${mode_refresh:0:-3}.${mode_refresh: -3}Hz
			printf "%sx%s@%s %s\n" "$mode_width" "$mode_height" "$mode_refresh" "$mode_ratio"
		done
	done < <(swaymsg -t get_outputs |
		jaq -rc \
			"(.[] 
                | select(.name==\"$choice_output\") 
                | (.current_mode | .width, .height, .refresh, .picture_aspect_ratio) ,
                (.modes | length , (.[] | .width, .height, .refresh, .picture_aspect_ratio)))")
}

## Pick options ---

pick_output() {
	choice_output=$(fuzzy_picker "$(list_outputs_with_alias)" "Output" | awk '{print $1}')
}

pick_operation() {
	choice_operation=$(fuzzy_picker "$(list_operations)" "Operations" | awk '{print $2}')
}

pick_scale_factor() {
	choice_scale_factor=$(fuzzy_picker "$(list_scale_factor)" "Scale factor")
}

pick_rotation() {
	choice_rotation=$(fuzzy_picker "$(list_rotations)" "Rotation options")
}

pick_mode() {
	# Removes the aspect ratio and duplicates for now
	modes=$(list_modes | awk '{print $1}' | uniq)
	choice_mode=$(fuzzy_picker "$modes" "Modes")
}

pick_output_mirror() {
    outputs=$(list_outputs_with_alias)
    printf -v outputs "%s\n%-12s | " "$outputs" "region "
    choice_output=$(fuzzy_picker "$outputs" "Output" | awk '{print $1}')
}

pick_addr() {
	choice_addr=$(fuzzy_picker "$(list_addr)" "Address")
	case "$choice_addr" in
	"Any")
		choice_addr="0.0.0.0"
		;;
	"Other")
		printf "Enter address\n"
		read -r choice_addr
		;;
	esac
}

## Run operations ---

operation_scale() {
	swaymsg output "$choice_output" scale "$choice_scale_factor"
}

operation_toggle() {
	swaymsg output "$choice_output" toggle
}

operation_mode() {
	swaymsg output "$choice_output" mode "$choice_mode"
}

operation_rotation() {
	swaymsg output "$choice_output" transform "$choice_rotation"
}

operation_mirror() {
    if [ -z "$choice_output" ]; then
        exit 0
    fi
    printf "%s\n%s\n" "Choose operations with '-t' flag:" "$(list_rotations)"
    if [ "$choice_output" == "region" ]; then
        wl-mirror -S -r "$(slurp)"
    else
        wl-mirror -S "$choice_output"
    fi

}

operation_headless_create() {
	swaymsg create_output

	# shellcheck disable=SC2181
	if [ $? -eq 0 ]; then
		echo "Headless output created."
	fi
}

operation_headless_remove() {
	swaymsg output "$choice_output" unplug

	# shellcheck disable=SC2181
	if [ $? -eq 0 ] && [ -n "$choice_output" ] ; then
		echo "$choice_output removed."
	fi
}

operation_headless_vnc() {
	wayvnc -o "$choice_output" "$choice_addr"
}

run_operation() {
	case "$choice_operation" in
	"Scale")
		pick_output
		pick_scale_factor
		operation_scale
		;;
	"Toggle")
		pick_output
		operation_toggle
		;;
	"Mode")
		pick_output
		pick_mode
		operation_mode
		;;
	"Rotate")
		pick_output
		pick_rotation
		operation_rotation
		;;
	"List")
		list_outputs_info
		;;
	"Headless-Create")
		operation_headless_create
		;;
	"Headless-Remove")
		pick_output
		operation_headless_remove
		;;
    "Virtual-Display")
		pick_output
		pick_addr
		operation_headless_vnc
        ;;
	"Mirror") 
        pick_output_mirror
        operation_mirror
        ;;
	esac
}

## Script general ---

fuzzy_picker() {
	echo "$1" | fzf \
		--border=sharp \
		--cycle \
		--header="$2" \
		--header-first \
		--info=inline \
		--margin=0,0,0,0 \
		--padding=0,0,0,1 \
		--height=50%
}

print_help() {
	printf "\
> Sway output control <

Options:
    -m, --mode       <output> <mode>                    Change the output mode.
    -r, --rotate     <output> <rotation>                Rotate an output.
    -s, --scale      <output> <scale>                   Scale an output.
    -t, --toggle     <output>                           Toggle an output.
    -w, --mirror     <output|region>                    Mirror an output or region with wl-mirror using stream mode.
    -l, --list                                          List outputs information.
    -h, --help                                          Show this help.
    --cheadless                                         Create headless output.
    --rheadless      <output>                           Remove headless output.
    --vdisplay       <output> <addr>                    Craete virtual display with VNC and a headless output.

Info:
    Operations and options have a fuzzy selector if not specified.
    Output can be the name or an alias in 'alias.json'.
    See 'man 5 sway-output' for more documentation.
"
}

parse_command() {
	case $# in
	"0") # No flags
		pick_operation
		run_operation
		;;
	"1") # With operation flag
		case "$1" in
		-s | --scale)
			choice_operation="Scale"
			run_operation
			;;
		-t | --toggle)
			choice_operation="Toggle"
			run_operation
			;;
		-m | --mode)
			choice_operation="Mode"
			run_operation
			;;
		-r | --rotate)
			choice_operation="Rotate"
			run_operation
			;;
        -w | --mirror)
			choice_operation="Mirror"
            run_operation
            ;;
        --cheadless)
			choice_operation="Headless-Create"
			run_operation
            ;;
        --rheadless)
			choice_operation="Headless-Remove"
			run_operation
            ;;
        --vdisplay)
			choice_operation="Virtual-Display"
			run_operation
            ;;
		-l | --list)
			list_outputs_info
			;;
		-h | --help | *)
			print_help
			;;
		esac
		;;
	"2") # With operation flag + output information
		case "$1" in
		-s | --scale)
			choice_output=$(get_output_from_alias "$2")
			pick_scale_factor
			operation_scale
			;;
		-t | --toggle)
			choice_output=$(get_output_from_alias "$2")
			operation_toggle
			;;
		-m | --mode)
			choice_output=$(get_output_from_alias "$2")
			pick_mode
			operation_mode
			;;
		-r | --rotate)
			choice_output=$(get_output_from_alias "$2")
			pick_rotation
			operation_rotation
            ;;
        -w | --mirror)
			choice_output=$(get_output_from_alias "$2")
            operation_mirror
			;;
        --rheadless)
			choice_output=$(get_output_from_alias "$2")
            operation_headless_remove
            ;;
        --vdisplay)
			choice_output=$(get_output_from_alias "$2")
            pick_addr
            operation_headless_vnc
            ;;
		*)
			print_help
			;;
		esac
		;;
	"3") # With operation flag + output information + additional information
		case "$1" in
		-s | --scale)
			choice_output=$(get_output_from_alias "$2")
			choice_scale_factor="$3"
			operation_scale
			;;
		-m | --mode)
			choice_output=$(get_output_from_alias "$2")
			choice_mode="$3"
			operation_mode
			;;
		-r | --rotate)
			choice_output=$(get_output_from_alias "$2")
			choice_rotation="$3"
			operation_rotation
			;;
        --vdisplay)
			choice_output=$(get_output_from_alias "$2")
            choice_addr="$3"
            operation_headless_vnc
            ;;
		*)
			print_help
			;;
		esac
		;;
	*)
		print_help
		;;
	esac
}

parse_command "$@"
