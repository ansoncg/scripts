#!/bin/bash

toggles_path=$HOME/files/scripts/toggle

command_line() {
	case $# in
	"0")
		print_help
		exit
		;;
	"1")
		case "$1" in
		-h | --help)
			print_help
			exit
			;;
		-s | --start)
			operation=start_toggle
			menu_name="Start Toggle"
			;;
		-x | --stop)
			operation=stop_toggle
			menu_name="Stop Toggle"
			;;
		-e | --explain)
			operation=explain_toggle
			menu_name="Explain Toggle"
			;;
		-l | --list)
			get_registered_toggles
			exit
			;;
		*)
			print_error operation "$1"
			exit
			;;
		esac
		entry=$(fuzzy_list "$menu_name")
		if [ -z "$entry" ]; then
			exit
		fi
		source "$toggles_path"/"$entry"
		$operation "$entry"
		;;
	"2")
		case "$1" in
		-s | --start)
			operation=start_toggle
			;;
		-x | --stop)
			operation=stop_toggle
			;;
		-e | --explain)
			operation=explain_toggle
			;;
		*)
			print_error operation "$1"
			exit
			;;
		esac
		if [ ! -f "$toggles_path"/"$2" ]; then
			print_error toggle "$2"
			exit
		fi
		source "$toggles_path"/"$2"
		$operation
		;;
	*)
		print_error args $#
		exit
		;;
	esac
}

fuzzy_list() {
	toggles=$(get_registered_toggles)
	entry=$(
		fzf \
			--border=sharp \
			--header="$1" \
			--header-first \
			--cycle \
			--info=inline \
			--margin=0,0,0,0 \
			--padding=0,0,0,1 \
			--height=30% \
			<<<"$toggles"
	)
	echo "$entry"
}

print_help() {
	printf "\
Manage the toggle of some applications, services and configurations
This script is to be used on stuff that you want to turn on and off

Options:
    -h, --help            Print this help

    Operations
        -s, --start   <toggle>  Start toggle
        -x, --stop    <toggle>  Stop toggle
        -e, --explain <toggle>  Explain toggle
"
}

print_error() {
	printf "Error: "
	case "$1" in
	args)
		printf "Invalid number of arguments -> '%s'\n" "$2"
		;;
	operation)
		printf "Invalid operation -> '%s'\n" "$2"
		;;
	toggle)
		printf "Invalid toggle -> '%s'\n" "$2"
		;;
	empty)
		printf "No toggle specified -> '%s'\n" "$2"
		;;
	esac
}

process_start() {
	process_pid=$(pgrep --full "$1")
	if [ -z "$process_pid" ]; then
		$1 >/dev/null 2>&1 &
		disown
	else
		echo "Process '$1' is already running"
	fi
}

process_stop() {
	process_pid=$(pgrep --full "$1")
	if [ -z "$process_pid" ]; then
		echo "Process '$1' isn't running"
	else
		kill "$process_pid"
	fi
}

get_registered_toggles() {
	ls -1 "$toggles_path"
}

command_line "$@"
