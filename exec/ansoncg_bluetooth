#!/bin/bash

# Register controllers
declare -A controllers
controllers[orico]=00:1A:7D:DA:71:13  # Bluetooth dongle
controllers[laptop]=D0:C5:D3:4C:92:20 # Internal laptop bluetooth

# Register devices
declare -A devices
devices[kb]=F4:73:35:5D:08:5E   # K380 keyboard
devices[jbl]=5C:FB:7C:0F:E3:B9  # JBL T450BT
devices[tws1]=5A:83:A2:99:2F:51 # TWS-6
devices[tws2]=5A:83:A2:99:2F:51 # TWS-6

# Register associations
declare -A associations
associations[kb]=orico
associations[jbl]=laptop
associations[tws1]=laptop
associations[tws2]=orico

restart_bluetooth() {
	systemctl restart bluetooth.service
}

get_registered_devices() {
	devs=""
	for key in "${!devices[@]}"; do devs+="${key} "; done
}

command_device() {
	if [ ${devices[$2]+_} ]; then
		controller=${controllers[${associations[$2]}]}
		printf "select %s\n$1 ${devices[$2]}\n" "$controller" | bluetoothctl
	else
		get_registered_devices
		printf "Device '$2' not found\nRegistered devices: %s\n" "$devs"
	fi
}

action_select() {
    action=$(printf "\
Connect
Disconnect
Remove
Info
Trust
Scan devices on
Scan devices off" | fzf)
}

reconnect_device() {
	command_device disconnect "$1"
	sleep 10
	command_device connect "$1"
}

# All controllers functions ---

bluetooth_menu() {
	controller_choice=$(controller_select)
	device_choice=$(controller_devices_select "$controller_choice")
	if [ -z "$device_choice" ]; then
		device_choice="None"
	fi
	echo "$controller_choice $device_choice"
}

all_controllers() {
	bluetoothctl -- list | grep "Controller" | cut -d ' ' -f 2
}

all_devices() {
	bluetoothctl -- devices | cut -d ' ' -f2-
}

all_devices_connected() {
	declare controllers

	controllers=$(all_controllers)
	for controller in $controllers; do
		devices_connected=$(controller_devices_connected "$controller")
		printf "Controller: %s \n%s\n" "$controller" "$devices_connected"
	done
}

# Per controller functions ---

controller_devices() {
	printf "select %s \n devices" "$1" | bluetoothctl | grep Device | cut -d ' ' -f2-
}

controller_devices_connected() {
	printf "select %s \n devices Connected" "$1" | bluetoothctl | grep Device | cut -d ' ' -f2-
}

controller_select() {
	all_controllers | fzf
}

controller_devices_select() {
	entry=$(controller_devices "$1" | fzf)
	echo "$entry" | cut -d ' ' -f1
}

# Per controller+device combo functions ---

combo_send_command() {
	if [ -n "$controller_choice" ] && [ -n "$device_choice" ]; then
		printf "select %s\n%s %s\n" "$controller_choice" "$1" "$device_choice" | bluetoothctl
	fi
}

print_help() {
	get_registered_devices
	printf "\
Bluetooth script
Options:
     -c, --connect     Connect a device
     -d, --disconnect  Disconnect a device
     -r, --reconnect   Disconnect a device and reconnect after 10 seconds
     -i, --info        Get info about a device
     -l, --list        List connected devices
     Registered devices: %s\n" "$devs"
}

if [ "$(systemctl is-active "bluetooth.service")" = "inactive" ]; then
	printf "Bluetooth is off\n"
else
	case "$1" in
	-t)
        action_select
		# bluetooth_menu
		# combo_send_command "$2"
		;;
	-c | --connect)
		command_device connect "$2"
		;;
	-d | --disconnect)
		command_device disconnect "$2"
		;;
	-r | --reconnect)
		reconnect_device "$2"
		;;
	-x | --restart)
		restart_bluetooth
		;;
	-i | --info)
		command_device info "$2"
		;;
	-l | --list)
		all_devices_connected
		;;
	-h | --help | *)
		print_help
		;;
	esac
fi
