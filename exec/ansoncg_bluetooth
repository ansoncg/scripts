#!/bin/bash

# Dependencies:
# - bluez
# - fzf
# - jq/jaq

labels_path="$HOME/.config/ansoncg/bluetooth/labels.json"

# Bluetooth general ---

general_bluetooth_restart() {
	systemctl restart bluetooth.service
}

general_test_bluetooth() {
	if [ "$(systemctl is-active "bluetooth.service")" = "inactive" ]; then
		printf "Bluetooth is off\n"
		exit 1
	fi
}

# All controllers ---

all_controllers() {
	bluetoothctl -- list | grep "Controller" | cut -d ' ' -f 2
}

all_devices() {
	bluetoothctl -- devices | cut -d ' ' -f2-
}

all_devices_connected() {
	declare controllers

	controllers=$(all_controllers)
	for controller in $controllers; do
		devices_connected=$(controller_devices_connected "$controller")
		printf "Controller: %s \n%s\n" "$controller" "$devices_connected"
	done
}

# Per controller ---

controller_devices() {
	printf "select %s \n devices" "$1" | bluetoothctl | grep Device | cut -d ' ' -f2-
}

controller_devices_connected() {
	printf "select %s \n devices Connected" "$1" | bluetoothctl | grep Device | cut -d ' ' -f2-
}

controller_select() {
    fuzzy_picker "$(all_controllers)" "Bluetooth - Select controller"
}

controller_devices_select() {
    entry=$(fuzzy_picker "$(controller_devices "$1")" "Bluetooth - Select device")
	echo "$entry" | cut -d ' ' -f1
}

# Per controller+device combo ---

combo_send_command() {
	if [ -n "$controller_choice" ] && [ -n "$device_choice" ]; then
		printf "select %s\n%s %s\n" "$controller_choice" "$1" "$device_choice" | bluetoothctl
	fi
}

# Using labels

label_list() {
	jaq -rc '.[].label' <"$labels_path"
}

label_select() {
	while
		read -r controller
		read -r device
	do
		controller_choice=$controller
		device_choice=$device
	done < <(jaq -r ".[] | select(.label==\"$1\") | .controller, .device" <"$labels_path")
}

# Script general ---

script_bluetooth_menu() {
	controller_choice=$(controller_select)
	if [ -z "$controller_choice" ]; then
		exit 1
	fi
	device_choice=$(controller_devices_select "$controller_choice")
	if [ -z "$device_choice" ]; then
		exit 1
	fi
}

script_menu_action() {
	script_bluetooth_menu
	combo_send_command "$1"
	echo "Controller: $controller_choice | Device: $device_choice"
}

script_menu_action_label() {
	label_select "$2"
	combo_send_command "$1"
}

script_reconnect() {
	script_bluetooth_menu
	combo_send_command disconnect
	sleep 10
	combo_send_command connect
}

script_reconnect_label() {
	label_select "$1"
	combo_send_command disconnect
	sleep 10
	combo_send_command connect
}

script_action_select() {
	action=$(fuzzy_picker "\
Connect
Disconnect
Info
List
Remove
Scan
Trust" "Bluetooth - Select action")

	case "$action" in
	Connect | Disconnect | Remove | Info | Trust)
		action=$(echo "$action" | tr \[:upper:\] \[:lower:\])
		script_menu_action "$action"
		;;
	Scan)
		printf "> Scan for default controller only <\n"
		bluetoothctl scan on
		;;
	List)
		all_devices_connected
		;;
	esac
}

fuzzy_picker() {
	echo "$1" | fzf \
		--border=sharp \
		--cycle \
		--header="$2" \
		--header-first \
		--info=inline \
		--margin=0,0,0,0 \
		--padding=0,0,0,1 \
		--height=50%
}

print_help() {
	printf "\
> Bluetooth script that can handle multiple controllers <

Options:
    -b, --labels        Print registered labels.
    -c, --connect       Connect a device.
    -d, --disconnect    Disconnect a device.
    -h, --help          Show this help.
    -i, --info          Get info about a device.
    -l, --list          List connected devices.
    -r, --reconnect     Disconnect a device and reconnect after 10 seconds.
    -x, --restart       Restart bluetooth service.

Info:
    * Actions '-c', '-d', '-i' and '-r' can be used with predetermied associations 
    stored on 'labels.json' or with a menu if empty.

    * Calling the program without arguments brings up an action selection menu.
"
}

parse_command() {
	case $# in
	"0")
		script_action_select
		;;
	"1")
		case "$1" in
		-b | --labels)
			label_list
			;;
		-c | --connect)
			script_menu_action connect
			;;
		-d | --disconnect)
			script_menu_action disconnect
			;;
		-i | --info)
			script_menu_action info
			;;
		-r | --reconnect)
			script_reconnect
			;;
		-x | --restart)
			general_bluetooth_restart
			;;
		-l | --list)
			all_devices_connected
			;;
		-h | --help | *)
			print_help
			;;
		esac
		;;
	"2")
		case "$1" in
		-c | --connect)
			script_menu_action_label connect "$2"
			;;
		-d | --disconnect)
			script_menu_action_label disconnect "$2"
			;;
		-i | --info)
			script_menu_action_label info "$2"
			;;
		-r | --reconnect)
			script_reconnect_label "$2"
			;;
		*)
			print_help
			;;
		esac
		;;
	*)
		print_help
		;;
	esac
}

general_test_bluetooth
parse_command "$@"
